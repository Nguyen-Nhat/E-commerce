version: '3.8'
services:
  mysql:
    image: mysql:8.2
    container_name: mysql-ecom
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    command: --character-set-server=utf8 --collation-server=utf8_general_ci
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -proot"]
      interval: 3s
      timeout: 3s
      retries: 3
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecom-network

  redis:
    image: redis:7.4.0
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ecom-network


  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecom-network

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    container_name: kafka
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ecom-network

  debezium:
    image: debezium/connect:2.5.0.Final
    container_name: debezium
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium-config
      OFFSET_STORAGE_TOPIC: debezium-offset
      STATUS_STORAGE_TOPIC: debezium-status
      BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ecom-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    container_name: elasticsearch-ecom
    ports:
      - "9200:9200"
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - ecom-network

  bff:
    build:
      context: .
      dockerfile: ./bff/Dockerfile
    container_name: bff
    environment:
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    ports:
      - "8087:8087"
    links:
      - redis
    depends_on:
      - redis
    networks:
      - ecom-network

  resource:
    build:
      context: .
      dockerfile: ./resource/Dockerfile
    container_name: resource
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/resource?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_ELASTICSEARCH_URIS=elasticsearch:9200
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    ports:
      - "8080:8080"
    links:
      - redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
      debezium:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - ecom-network

  identity:
    build:
      context: .
      dockerfile: ./identity/Dockerfile
    container_name: identity
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/identity?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
    ports:
      - "8086:8086"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ecom-network

networks:
  ecom-network:
    driver: bridge
